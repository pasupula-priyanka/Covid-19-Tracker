{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","result","setResult","search","setSearch","useEffect","axios","all","get","then","responseArr","data","console","log","catch","err","lastUpdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","textAlign","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8f9791fb.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport axios from 'axios';\nimport Columns from 'react-columns';\nimport Form from 'react-bootstrap/Form'\nfunction App() {\n  const[latest,setLatest]= useState([]);\n  const[result,setResult] = useState([]);\n  const[search,setSearch]=useState(\"\")\n   useEffect(()=>{\n    axios\n    .all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries?sort=country\")\n    ])\n    .then(responseArr=>{\n      setLatest(responseArr[0].data)\n      setResult(responseArr[1].data)\n      console.log(responseArr[1].data)\n    })\n    .catch(err=>{\n    console.log(err)\n    })\n   },[]);\n\n   const date = new Date(parseInt(latest.updated))\n   const lastUpdated= date.toString();\n   const filterCountries= result.filter(item=>{\n     return search!== \"\"? item.country.includes(search):item;\n   })\n   const countries = filterCountries.map((data,i) =>{\n     return(\n       <Card\n        key = {i}\n        bg=\"light\"\n        text=\"dark\"\n        className=\"text-center\"\n        style={{margin:\"10px\"}}\n       >\n         <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n       <Card.Body>\n     <Card.Title>{data.country}</Card.Title>\n     <Card.Text>Cases{data.cases}</Card.Text>\n     <Card.Text>Deaths{data.deaths}</Card.Text>\n     <Card.Text>Recovered{data.recovered}</Card.Text>\n     <Card.Text>Today's cases{data.todayCases}</Card.Text>\n     <Card.Text>Today's deaths{data.todayDeaths}</Card.Text>\n     <Card.Text>Active{data.active}</Card.Text>\n     <Card.Text>Critical{data.critical}</Card.Text>\n       </Card.Body>\n       </Card>\n     )\n   });\n   var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  return (\n    <div >\n      <br/>\n      <h2 style={{textAlign:\"center\"}}>Covid-19 Live Stats</h2>\n      <br/>\n     <CardDeck>\n  <Card bg=\"info\" text={\"white\"}  className=\"text-center\"  style={{margin:\"10px\"}}>\n    \n    <Card.Body>\n      <Card.Title>Cases</Card.Title>\n      <Card.Text>\n       {latest.cases}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated} ago</small>\n    </Card.Footer>\n  </Card>\n  <Card  bg=\"danger\"\n   text={\"white\"}\n     className=\"text-center\"\n     style={{margin:\"10px\"}}\n  >\n    \n    <Card.Body>\n      <Card.Title>Deaths</Card.Title>\n      <Card.Text>\n      {latest.deaths}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated} ago</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"warning\" text={\"white\"}  className=\"text-center\"  style={{margin:\"10px\"}}>\n    \n    <Card.Body>\n      <Card.Title>Recovered</Card.Title>\n      <Card.Text>\n        {latest.recovered}\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated {lastUpdated} ago</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<br />\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control type=\"text\" placeholder=\"Search through country\"\n      onChange={e=>setSearch(e.target.value)}\n    />\n  </Form.Group>\n</Form>\n<Columns queries={queries}>{countries}</Columns>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}